#!/bin/sh

#Author : Arunagiriswaran E
#Company : ZOHOCORP

BINARY_TAR_FILE=devops.tar.gz
INSTALL_FILE_LENGTH=1470
MON_AGENT_BINARY_TYPE=__MON_AGENT_BINARY_TYPE__
#PRODUCT variables
PRODUCT_NAME='Site24x7'
PRODUCT_NAME_UPPERCASE='SITE24X7'
PRODUCT_NAME_LOWERCASE='site24x7'
MON_AGENT_NAME='monagent'
MON_AGENT_GROUP=$PRODUCT_NAME_LOWERCASE'-group'
MON_AGENT_USER=$PRODUCT_NAME_LOWERCASE'-agent'
MON_AGENT_USER_ID=''
MON_AGENT_INSTALL_INPUT=''
MON_AGENT_API_KEY=''
ENV_COLUMNS=''
MON_AGENT_PROXY_DETAILS=''
PROMETHEUS_INPUT=''
USERID=''
GROUPID=''
STATSD_INPUT=''
MYSQL_INPUT=''
INSTALL_DIR=/opt
PRODUCT_HOME=$INSTALL_DIR/$PRODUCT_NAME_LOWERCASE
MON_AGENT_HOME=$PRODUCT_HOME/$MON_AGENT_NAME
#OS variables
OS_NAME=`uname -s`
OS_BINARY_TYPE=''
INSTALL_SCRIPT_NAME=$(basename $0)
AGENT_VERSION=19.1.1

#Set Path
PATH=/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin:/usr/sfw/bin:$PATH
PS_CMD='ps auxww '
if [ -f "/etc/release" ]; then
	cat /etc/release | grep "Solaris 10" > /dev/null
	if [ $? = 0 ]; then
		PATH=/usr/xpg4/bin:/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin:/usr/sfw/bin:$PATH
		PS_CMD='ps -e '
	fi
fi
on_error() {
	echo "Error message before EXIT - $ERROR_MSG" >> $MON_AGENT_INSTALL_LOG
	if [ $? = 2 ]; then
		if [ $(command -v curl) ]; then
			`curl -sL --max-time 10 -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data-binary "$(error_variables)" $PLUS_ERROR_LINK$MON_AGENT_API_KEY\&req_type=venv_error`
		fi
	printf "\033[31m
$ERROR_MSG
\n\033[0m"
fi
}

trap "{ on_error \$ERROR_MSG ; }" EXIT

error_variables(){
systemctl --version 2>/dev/null
if [ $? = 0 ] && [ -d "/etc/systemd/system/" ]; then
	INIT_SYSTEM="systemd"
else
	INIT_SYSTEM="sysvinit"
fi
command -v which 2>/dev/null
if [ $? = 0 ]; then
    which_utility="Present"
fi
command -v file 2>/dev/null
if [ $? = 0 ]; then
    file_utility="Present"
fi
command -v useradd 2>/dev/null
if [ $? = 0 ]; then
    useradd_utility="Present"
fi
command -v groupadd 2>/dev/null
if [ $? = 0 ]; then
    groupadd_utility="Present"
fi
command -v userdel 2>/dev/null
if [ $? = 0 ]; then
    userdel_utility="Present"
fi
command -v groupdel 2>/dev/null
if [ $? = 0 ]; then
    groupdel_utility="Present"
fi
command -v sed 2>/dev/null
if [ $? = 0 ]; then
sed_utility="Present"
fi
command -v usermod 2>/dev/null
if [ $? = 0 ]; then
usermod_utility="Present"
fi
command -v awk 2>/dev/null
if [ $? = 0 ]; then
awk_utility="Present"
fi
command -v tar 2>/dev/null
if [ $? = 0 ]; then
tar_utility="Present"
fi

if [ -f /proc/self/cgroup ]; then 
	is_docker_container=$(grep docker /proc/self/cgroup)
	if [ ! -z "$is_docker_container" ]; then
		is_docker_container="True"
	fi
fi

	cat <<EOF
{
    "error_message" : $ERROR_MSG
    "apikey" : $MON_AGENT_API_KEY
    "os_info" : `uname -a 2>/dev/null`
    "ldd" : `ldd --version 2>/dev/null | awk 'NR=1{ print $NF }'`
    "servicemanager" : $INIT_SYSTEM
    "commands_attendance" : which - $which_utility | file - $file_utility | useradd - $useradd_utility | groupadd - $groupadd_utility |userdel - $userdel_utility |groupdel - $groupdel_utility |sed - $sed_utility | awk_utility - $awk_utility | tar_utility - $tar_utility | usermod_utility - $usermod_utility
    "DockerContainer" : $is_docker_container
}
EOF
}

print_green() {
    printf "\033[32m%s\033[0m\n" "$*"
}

print_console() {
    printf "%s\n" "$*"
}

print_red() {
    printf "\033[31m%s\033[0m\n" "$*"
}


print_done() {
    print_green "Done"
}

command -v which 2>/dev/null 1>/dev/null
if [ $? = 0 ]; then
    COMMAND_CHECKER="which"
else
    COMMAND_CHECKER="command -v"
fi

if [ $(command -v curl) ]; then
    DOWNLOAD_CMD="curl -Lo"
    DOWNLOAD_CMD_WITHOUT_PARAMS="curl -O"
    print_console "Download utility :: curl detected"
elif [ $(command -v wget) ]; then
    DOWNLOAD_CMD="wget -O"
    DOWNLOAD_CMD_WITHOUT_PARAMS="wget"
    print_console "Download utility :: wget detected"
elif [ $(command -v fetch) ]; then
    DOWNLOAD_CMD="fetch -o"
    DOWNLOAD_CMD_WITHOUT_PARAMS="fetch"
    print_console "Download utility :: fetch detected"
else
    DOWNLOAD_CMD=''
    DOWNLOAD_CMD_WITHOUT_PARAMS=''
    print_red "Download utility :: All curl, wget and fetch not present hence exiting"
    exit $FAILURE
fi

#Constants
INSTALL='INSTALL'
REINSTALL='REINSTALL'
UNINSTALL='UNINSTALL'
SUCCESS=0
WARNING=1
FAILURE=2
BOOL_TRUE='true'
BOOL_FALSE='false'

#Python Details
PYTHON_BIN_PATH=""
OS_NAME=`uname -s`
PYTHON_VENV_ZIP_APP=$BOOL_FALSE
DETECTED_PYTHON=""
INPUT_PYTHON=""

#Product Details
PRODUCT_NAME_UPPERCASE='SITE24X7'
PRODUCT_NAME_LOWERCASE='site24x7'
MON_AGENT_NAME='monagent'
MON_AGENT_START="start"
MONAGENT_PYTHON="MonitoringAgent.py"
MONAGENT_WATCHDOG_PYTHON="MonitoringAgentWatchdog.py"
MONAGENT_BIN="Site24x7Agent"
MONAGENT_WATCHDOG_BIN="Site24x7AgentWatchdog"

AUTOMATION=$BOOL_FALSE
PLUGINS=$BOOL_TRUE
MGMT_AXN=$BOOL_TRUE

#Installation Details
variableUpdate(){
PRODUCT_HOME=$INSTALL_DIR/$PRODUCT_NAME_LOWERCASE
PYTHON_VENV_HOME=$PRODUCT_HOME/venv
PYTHON_VENV_HOME_ACTIVATE=$PYTHON_VENV_HOME/bin/activate
PYTHON_VENV_BIN_PATH=$PYTHON_VENV_HOME/bin/python
PYTHON_VENV_PIP_PATH=$PYTHON_VENV_HOME/bin/pip
MON_AGENT_HOME=$PRODUCT_HOME/$MON_AGENT_NAME
MON_AGENT_BIN_DIR=$MON_AGENT_HOME/bin
MON_AGENT_LIB_DIR=$MON_AGENT_HOME/lib
MON_AGENT_LOG_DIR=$MON_AGENT_HOME/logs
MON_AGENT_PYPI_DIR=$MON_AGENT_HOME/pypi
MON_AGENT_PYPI_VENV_FILE=$MON_AGENT_PYPI_DIR/virtualenv.py
MON_AGENT_PYPI_SETUPTOOLS_FILE=$MON_AGENT_PYPI_DIR/ez_setup.py
#subject to py ver [py3.3+ : v20.3.4 | py3.7+ : v23.1.2]
MON_AGENT_PYPI_PIP_FILE=$MON_AGENT_PYPI_DIR/pip/v20.3.4/get-pip.py
#subject to py ver [py3.5+ : v20.0 | py3.7+ : v20.21]
MON_AGENT_LOG_DETAIL_DIR=$MON_AGENT_LOG_DIR/details
MON_AGENT_PRODUCT_PROFILE=$MON_AGENT_HOME/.product_profile
MON_AGENT_UNINSTALL_FILE=$MON_AGENT_BIN_DIR/uninstall
MON_AGENT_BIN_BOOT_SERVICE_FILE=$MON_AGENT_BIN_DIR/monagentservice
MON_AGENT_SYSTEMD_BIN_BOOT_SERVICE_FILE=$MON_AGENT_BIN_DIR/systemd_monagentservice
MON_AGENT_FREEBSD_BIN_BOOT_SERVICE_FILE=$MON_AGENT_BIN_DIR/freebsd_monagentservice
MON_AGENT_SUNOS_BIN_BOOT_SERVICE_FILE=$MON_AGENT_BIN_DIR/site24x7monagent.xml
MON_AGENT_OSX_BIN_BOOT_SERVICE_FILE=$MON_AGENT_BIN_DIR/osx_monagentservice
MON_AGENT_OSX_WATCHDOG_BIN_BOOT_SERVICE_FILE=$MON_AGENT_BIN_DIR/osx_monagentwatchdogservice
MON_AGENT_OSX_SERVICE_PLIST_FILE=/Library/LaunchDaemons/com.site24x7.monagentservice.plist
MON_AGENT_OSX_WATCHDOGSERVICE_PLIST_FILE=/Library/LaunchDaemons/com.site24x7.monagentwatchdogservice.plist
MON_AGENT_SHELL_BIN_MONAGENT=$MON_AGENT_BIN_DIR/shell_monagent
MON_AGENT_SHELL_BIN_MONAGENTWATCHDOG=$MON_AGENT_BIN_DIR/shell_monagentwatchdog
MON_AGENT_BIN_BOOT_FILE=$MON_AGENT_BIN_DIR/monagent
MON_AGENT_WATCHDOG_BIN_BOOT_FILE=$MON_AGENT_BIN_DIR/monagentwatchdog
MON_AGENT_BIN_PROFILE=$MON_AGENT_BIN_DIR/profile.sh
MON_AGENT_BIN_PROFILE_ENV=$MON_AGENT_BIN_DIR/profile.env.sh
FREEBSD_PROFILE=$MON_AGENT_BIN_DIR/freebsd_profile.sh
MON_AGENT_PROFILE=$MON_AGENT_HOME/.profile
MON_AGENT_PROFILE_ENV=$MON_AGENT_HOME/.profile.env
MON_AGENT_CONF_DIR=$MON_AGENT_HOME/conf
MON_AGENT_CONF_FILE=$MON_AGENT_CONF_DIR/monagent.cfg
MON_AGENT_PS_WORKER_FILE=$MON_AGENT_CONF_DIR/ps_worker.conf
MON_AGENT_ERR_FILE=$MON_AGENT_LOG_DETAIL_DIR/monagent_err
MON_AGENT_WATCHDOG_ERR_FILE=$MON_AGENT_LOG_DETAIL_DIR/monagent_watchdog_err
BINARY_TAR_FILE=site24x7agent.tar.gz
MON_AGENT_INSTALL_LOG=$PRODUCT_HOME/site24x7install.log
MON_AGENT_CONTACT_SUPPORT_MESSAGE="Please contact support with $MON_AGENT_INSTALL_LOG , $MON_AGENT_LOG_DIR  and $MON_AGENT_LOG_DETAIL_DIR folder."
PRESENT_INIT_DAEMON_NAME=""
INIT_DAEMON="initd"
SYSTEMD_DAEMON="systemd"
UPSTART_DAEMON="upstart"
NEW_MON_AGENT_PROFILE=$MON_AGENT_HOME/.new_profile
NEW_MON_AGENT_BIN_BOOT_FILE=$MON_AGENT_BIN_DIR/new_monagent
NEW_MON_AGENT_WATCHDOG_BIN_BOOT_FILE=$MON_AGENT_BIN_DIR/new_monagentwatchdog
NEW_MON_AGENT_CONF_FILE=$MON_AGENT_CONF_DIR/monagent_new.cfg
#user varaibles
MON_AGENT_GROUP=$PRODUCT_NAME_LOWERCASE'-group'
MON_AGENT_USER=$PRODUCT_NAME_LOWERCASE'-agent'
MON_AGENT_SETTINGS_FILE=$MON_AGENT_CONF_DIR/settings.cfg
}
#Init system variables
INIT_SYSTEM=""
INIT_FOLDER=""
INIT_ADDITION=$BOOL_TRUE
SYSTEMD_INIT_FOLDER="/etc/systemd/system/"
INIT_SYSTEMD="systemd"
INIT_SYSV="sysv"
AGENT_SERVICE_FILE_NAME_IN_INIT="site24x7monagent"
PY_ERROR_MSG="Absent Modules | "
PY_ERROR_FLAG=$BOOL_FALSE
MON_AGENT_DOCKER_AGENT=$BOOL_FALSE
MON_AGENT_PS_WORKER=$BOOL_FALSE
MON_AGENT_PROCFS_PATH=""
MON_AGENT_SYSFS_PATH=""
COMPILE_PYTHON_PACKAGES=$BOOL_FALSE
USE_SYSTEM_VENV=$BOOL_FALSE
MON_AGENT_NEW_KEY=$BOOL_FALSE
SERVER='https://staticdownloads.site24x7.com'
DOWNLOAD_URL="$SERVER/server/linuxagent.tar.gz"
PYTHON_PACK_DOWNLOAD_URL="$SERVER/server/python_packages.zip"
PLUS_ERROR_LINK="https://plus.site24x7.com/plus/RemoteInstallerUsingSSH?custID="

setDownloadUrl()
{	
	DC="${MON_AGENT_API_KEY:0:2}"
	case "$DC" in 
    	eu | cn | in | au | jp ) 
			PLUS_ERROR_LINK="${PLUS_ERROR_LINK//.com/.$DC}"
			DOWNLOAD_URL="${DOWNLOAD_URL//.com/.$DC}"
			PYTHON_PACK_DOWNLOAD_URL="${PYTHON_PACK_DOWNLOAD_URL//.com/.$DC}"
        ;;
	esac
}

if [ "$OS_NAME" = "SunOS" ]; then
	userdel="userdel -r"
	groupdel="groupdel"
elif [ "$OS_NAME" = "FreeBSD" ]; then
	userdel="pw userdel"
	groupdel="pw groupdel"
elif [ "$OS_NAME" = "AIX" ]; then
	userdel="userdel -r"
	groupdel="rmgroup"
else
	userdel="userdel"
	groupdel="groupdel"
fi

generateUninstallFile()
{
	printf "#!/bin/sh
	PATH=/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin:$PATH
	echo \"Stopping Site24x7 monitoring agent\"
	$MON_AGENT_BIN_DIR/monagentwatchdog stop
	$MON_AGENT_BIN_DIR/monagent stop
	echo $MON_AGENT_REMOVE_BOOT_SCRIPT_MESSAGE
	update-rc.d -f $AGENT_SERVICE_FILE_NAME_IN_INIT remove 2>/dev/null
	chkconfig --del $AGENT_SERVICE_FILE_NAME_IN_INIT 2>/dev/null
	rm -f /sbin/init.d/$AGENT_SERVICE_FILE_NAME_IN_INIT 2>/dev/null
	rm -f /etc/init.d/$AGENT_SERVICE_FILE_NAME_IN_INIT 2>/dev/null
	rm -f /etc/rc.d/$AGENT_SERVICE_FILE_NAME_IN_INIT 2>/dev/null
	rm -f /etc/rc.d/rc*.d/*$MON_AGENT_BOOT_FILE_NAME
	systemctl disable site24x7monagent.service 2>/dev/null
	systemctl daemon-reload 2>/dev/null
	rm -f /etc/systemd/system/site24x7monagent.service 2>/dev/null
	rm -rf $MON_AGENT_HOME
	$userdel $MON_AGENT_USER 2>/dev/null
	$groupdel $MON_AGENT_GROUP 2>/dev/null 
	echo \"Site24x7 monitoring agent uninstalled successfully\"" > $1
	chmod 755 $1 2>$MON_AGENT_INSTALL_LOG
}

generateNonRootUninstallFile()
{
	printf "#!/bin/sh
	PATH=/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin:$PATH
	echo \"Stopping Site24x7 monitoring agent\"
	$MON_AGENT_BIN_DIR/monagentwatchdog stop
	$MON_AGENT_BIN_DIR/monagent stop
	rm -f /sbin/init.d/$AGENT_SERVICE_FILE_NAME_IN_INIT 2>/dev/null
	rm -f /etc/init.d/$AGENT_SERVICE_FILE_NAME_IN_INIT 2>/dev/null
	rm -f /etc/rc.d/$AGENT_SERVICE_FILE_NAME_IN_INIT 2>/dev/null
	rm -f /etc/rc.d/rc*.d/*$MON_AGENT_BOOT_FILE_NAME
	systemctl disable site24x7monagent.service 2>/dev/null
	systemctl daemon-reload 2>/dev/null
	rm -f /etc/systemd/system/site24x7monagent.service 2>/dev/null
	rm -rf $MON_AGENT_HOME
	$userdel $MON_AGENT_USER 2>/dev/null
	$groupdel $MON_AGENT_GROUP 2>/dev/null
	echo \"Site24x7 monitoring agent uninstalled successfully\"" > $1
	chmod 755 $1 2>$MON_AGENT_INSTALL_LOG
}
log() {
	echo $(date +"%F %T.%N") "    $1" >> $MON_AGENT_INSTALL_LOG 2>&1
}


isRootUser() {
	if [ "$(id -u)" != "0" ]
	then
		cat <<ERROR_MESSAGE

	Please use 'sudo' or log in as root to run $PRODUCT_NAME monitoring agent. 

ERROR_MESSAGE
		exit $FAILURE
	fi	
}

executeCommandAndRedirectOutputToLog() {
	#print_green "Executing command : $@"
	$@ >> $MON_AGENT_INSTALL_LOG
}

pip_installation(){
	print_console "Installing PIP in python virtual environment ....."
	sudo -H $PYTHON_VENV_BIN_PATH $MON_AGENT_PYPI_PIP_FILE >> $MON_AGENT_INSTALL_LOG >/dev/null
	if [ "$(id -u)" == "0" ]; then
		PYTHON_VENV_PIP_PATH="sudo -H "$PYTHON_VENV_PIP_PATH
	fi
	rm -f get-pip.pyc
}

install_python_package()
{
        command="unzip $1"
        file_extension=".zip"
        eval $command $REDIRECTION_CMD
        directory=`basename $1 $file_extension`
        cd $directory
        echo $PYTHON_VENV_BIN_PATH >> $MON_AGENT_INSTALL_LOG
        eval $PYTHON_VENV_BIN_PATH setup.py build >> $MON_AGENT_INSTALL_LOG
        eval $PYTHON_VENV_BIN_PATH setup.py install >> $MON_AGENT_INSTALL_LOG
        cd ..
}


direct_package_installation(){
        pip_installation
        python_module_check "pip"
        if [ "$PY_ERROR_FLAG" == "$BOOL_FALSE" ]; then
			print_green "Python PIP installed successfully in the created virtual environment"
        	print_console "Installing required python packages using pip ....."
            modules=`cat $MON_AGENT_CONF_DIR/requirements.txt`
            for py_mod in $modules; do
                if [ "$SHELL_UTILITY" == "bash" ]; then
                	if [ "$OS_NAME" = "FreeBSD" ]; then
                		env "CFLAGS=-I/usr/local/include -L/usr/local/lib" $PYTHON_VENV_PIP_PATH install $py_mod >> $MON_AGENT_INSTALL_LOG 2>&1
                	else
                		$PYTHON_VENV_PIP_PATH install $py_mod >> $MON_AGENT_INSTALL_LOG 2>&1
                	fi
                else
                    $PYTHON_VENV_PIP_PATH install $py_mod >> $MON_AGENT_INSTALL_LOG 2>&1
                fi
            done
            print_green "Successfully installed all python modules"
		else
			print_red "Error while installing Python PIP in venv....Exiting agent installation"
			exit $FAILURE
        fi
}

python_venv_setup(){
	retry_src_venv=$BOOL_FALSE
	if [ -d $PYTHON_VENV_HOME ]; then
		log "Removing old venv"
		rm -r $PYTHON_VENV_HOME
	fi
	mkdir -p $PYTHON_VENV_HOME
	#using system venv
	if [ "$USE_SYSTEM_VENV" == "$BOOL_TRUE" ]; then 
		$PYTHON_BIN_PATH -m pip show virtualenv &>> /dev/null
		if [ $? -eq 0 ]; then
			print_console "Creating virtual environment through system virutalenv package...."
			$PYTHON_BIN_PATH -m virtualenv --no-pip --no-setuptools $PYTHON_VENV_HOME >> $MON_AGENT_INSTALL_LOG
		else
			print_red "Unable to find system virutalenv package in $PYTHON_BIN_PATH. Retrying through virtualenv source...."
			retry_src_venv=$BOOL_TRUE
		fi
	fi
	#using src venv
	if [[ "$USE_SYSTEM_VENV" == "$BOOL_FALSE" || "$retry_src_venv" == "$BOOL_TRUE" ]]; then 
		print_console "Installing python virtual environment from source....."
		$PYTHON_BIN_PATH $MON_AGENT_PYPI_VENV_FILE --no-pip --no-setuptools "$PYTHON_VENV_HOME" >> $MON_AGENT_INSTALL_LOG
		rm -f "virtualenv.pyc"
	fi
	#venv status
	if [ -x $PYTHON_VENV_BIN_PATH ]; then
		print_green "Python virtual environment created successfully"
	else
		print_red "Failed to create python virtual environment"
		exit $FAILURE
	fi
}

python_package_compiled_installation(){
      cd $MON_AGENT_PYPI_DIR
      $DOWNLOAD_CMD_WITHOUT_PARAMS $PYTHON_PACK_DOWNLOAD_URL >> $MON_AGENT_INSTALL_LOG
      eval unzip python_packages.zip $REDIRECTION_CMD
      print_console "python packages compilation initiated"
      print_console "This will take few minutes ......"
      modules=`cat python_package_source_files.txt`
      for py_mod in $modules; do
		install_python_package $py_mod
		if [ $? -eq 0 ]; then
			print_red "Error while installing $py_mod module in $PYTHON_VENV_BIN_PATH"
		fi
      done
	  print_green "Successfully installed Python modules"
}

python_module_check(){
	PYTHON_MODULE_CHECK=$($PYTHON_VENV_BIN_PATH -c "import pkgutil; print(0 if pkgutil.find_loader(\"$1\") else 1)")
    if [ "$PYTHON_MODULE_CHECK" = "1" ]; then
        PY_ERROR_MSG=$PY_ERROR_MSG" $1"
    	PY_ERROR_FLAG=$BOOL_TRUE
    fi
}

extractBinaries(){
	print_console "Downloading product packages"
	setDownloadUrl	
	mkdir -p $PRODUCT_HOME
	if [ ! -f $PRODUCT_HOME/$BINARY_TAR_FILE ] || [ "$RETVAL" != "0" ]; then
		$DOWNLOAD_CMD $PRODUCT_HOME/$BINARY_TAR_FILE "https://github.com/mrkksparrow/build-source-agent/raw/tester/source_agent_devops.tar.gz"
	fi
	cd $PRODUCT_HOME
	tar zxf $PRODUCT_HOME/$BINARY_TAR_FILE -C $PRODUCT_HOME 2>>$MON_AGENT_INSTALL_LOG
	if [  -d $PRODUCT_HOME/monagent ]; then
		print_green "Successfully Extracted files to The Directory : $PRODUCT_HOME"
		rm -rf $PRODUCT_HOME/$BINARY_TAR_FILE >> $MON_AGENT_INSTALL_LOG
	else
		gunzip -c $PRODUCT_HOME/$BINARY_TAR_FILE | tar xf - 2>>$MON_AGENT_INSTALL_LOG
		if [ -d $PRODUCT_HOME/monagent ]; then
			print_green "Successfully Extracted Agent Files to The Directory : $PRODUCT_HOME"
			rm -rf $PRODUCT_HOME/$BINARY_TAR_FILE >> $MON_AGENT_INSTALL_LOG
		else
			ERROR_MSG="Extraction unsuccessful hence quitting!!!"
			exit $FAILURE
		fi
	fi
	if [ "$AUTOMATION" == "$BOOL_FALSE" ];then
			log "Removing Automation Module"
			executeCommandAndRedirectOutputToLog "rm -rf $MON_AGENT_LIB_DIR/devops/source/python3.3/src/com/manageengine/monagent/automation"
		fi
		if [ "$PLUGINS" == "$BOOL_FALSE" ];then
			log "Removing Plugins Module"
			executeCommandAndRedirectOutputToLog "rm -rf $MON_AGENT_LIB_DIR/devops/source/python3.3/src/com/manageengine/monagent/plugins"
		fi
		if [ "$MGMT_AXN" == "$BOOL_FALSE" ];then
			log "Removing managment action privelege"
			executeCommandAndRedirectOutputToLog "rm -rf $MON_AGENT_CONF_DIR/mgmt_axn.zip"
		fi
		if [ "$HEARTBEAT" == "$BOOL_FALSE" ];then
			log "Removing heartbeat action"
			executeCommandAndRedirectOutputToLog "rm -rf $MON_AGENT_CONF_DIR/heartbeat.zip"
		fi
		if [ "$DC" == "$BOOL_FALSE" ];then
			log "Removing DC task"
			executeCommandAndRedirectOutputToLog "rm -rf $MON_AGENT_CONF_DIR/dc.zip"
		fi
		if [ "$APPS" == "$BOOL_FALSE" ];then
			log "Removing apps task"
			executeCommandAndRedirectOutputToLog "rm -rf $MON_AGENT_CONF_DIR/applications.zip"
		fi
		if [ "$RSRC_CHECK" == "$BOOL_FALSE" ];then
			log "Removing resource check"
			executeCommandAndRedirectOutputToLog "rm -rf $MON_AGENT_CONF_DIR/resource_check.zip"
		fi
}

setup_python_dependencies(){
        python_venv_setup
        #print_green "compile python packages : $COMPILE_PYTHON_PACKAGES"
        if [ "$COMPILE_PYTHON_PACKAGES" == "$BOOL_TRUE" ];then
             python_package_compiled_installation
        else
             direct_package_installation
        fi
}

set_pypi_files(){
	#to make py3.5 & py3.6 and Darwin OS use virtualenv.pyz
	if [ "$PYTHON_VENV_ZIP_APP" == "$BOOL_TRUE" ]; then 
		MON_AGENT_PYPI_VENV_FILE=$MON_AGENT_PYPI_DIR/virtualenv_v20.0.pyz
	fi
	#to make py3.7+ use latest get-pip.py and latest virtualenv.pyz
	if (( $max_minor_ver > 6 )); then 
		MON_AGENT_PYPI_VENV_FILE=$MON_AGENT_PYPI_DIR/virtualenv_v20.21.pyz
		MON_AGENT_PYPI_PIP_FILE=$MON_AGENT_PYPI_DIR/pip/v23.1.2/get-pip.py
	fi
	log "VENV file decided : $MON_AGENT_PYPI_VENV_FILE"
	log "PIP file decided : $MON_AGENT_PYPI_PIP_FILE"
}

check_python_attendance(){
	max_minor_ver=-1
	if [ -n "$INPUT_PYTHON" ]; then
		log "Using inputted python : $INPUT_PYTHON"
		if [ -x $INPUT_PYTHON ]; then
			max_minor_ver=$($INPUT_PYTHON -c "import sys; print(sys.version_info[1] if sys.version_info[0] == 3 else -2)")
			if [ $? -eq 0 ]; then
				PYTHON_BIN_PATH=$INPUT_PYTHON
				log "Entered python path is an executable"
			else
				print_red "Ensure that you have inputted the correct python3 executable path"
				exit $FAILURE
			fi
		else
			print_red "Ensure that you have inputted the correct python3 executable path"
			exit $FAILURE
		fi
	else
		python_possible_paths=('/usr/bin/python' '/usr/bin/python3' '/usr/local/bin/python' '/usr/local/bin/python3' '/opt/homebrew/bin/python3')
		for item in ${python_possible_paths[@]}; do
			if command -v $item >/dev/null; then
				minor_ver=$(${item} -c "import sys; print(sys.version_info[1] if sys.version_info[0] == 3 else -2)")
				if [ -n "$minor_ver" ] && (( $max_minor_ver < $minor_ver )); then 
					max_minor_ver=$minor_ver
					PYTHON_BIN_PATH=$item
				fi
			fi
		done
	fi

	#version compatability check
	if [[ -z "$max_minor_ver" || $max_minor_ver = -1 ]]; then
		print_red "Python not found in the server. Site24x7 agent installation needs Python version 3 or above."
		print_console "If you have Python3 already installed in the server, Kindly use -venv=<PYTHON3_PATH> as installation param to use that Python to create virtual environment."
    	exit $FAILURE
	elif [ $max_minor_ver = -2 ]; then
		print_red "Site24x7 agent installation needs python version 3 or above. Kindly upgrade Python in your server before proceeding with Site24x7 agent installation."
    	print_console "If you have Python3 already installed in the server, Kindly use -venv=<PYTHON3_PATH> as installation param to use that Python to create virtual environment."
		exit $FAILURE
	else
		print_console "Python Detected :: Python3."$max_minor_ver
		if (( $max_minor_ver > 4 )) || [ "$OS_NAME" = "Darwin" ]; then
			PYTHON_VENV_ZIP_APP=$BOOL_TRUE
		fi
	fi
	log "Python Path :: $PYTHON_BIN_PATH"
	log "Python Zip APP :: $PYTHON_VENV_ZIP_APP"
}

deleteFileIfExists() {
	if [ -f "$1" ]; then
		rm -f $1
	fi
}

appendToFile() {
		echo "$1" >> $2		
}

killAgent(){
	PID=$($PS_CMD | grep -i "$1" | grep -v grep | grep -v "$2" | awk '/ / {print $2}')
	if [ "$PID" != "" ]; then 
		kill $PID 2>/dev/null
		sleep 3
		PID=$($PS_CMD | grep -i "$1" | grep -v grep | grep -v "$2" | awk '/ / {print $2}')
		kill -9 $PID 2>/dev/null
	fi
}

unInstallAgent(){
	if [ -f $MON_AGENT_UNINSTALL_FILE ]; then
		$MON_AGENT_UNINSTALL_FILE 2>/dev/null
	fi
	if [ -d $MON_AGENT_HOME ]; then
		if [ "$MON_AGENT_NONROOT" = "$BOOL_TRUE" ]; then
			generateNonRootUninstallFile $MON_AGENT_HOME/bin/uninstall
		else
			generateUninstallFile $MON_AGENT_HOME/bin/uninstall
		fi
		$MON_AGENT_HOME/bin/uninstall 2>/dev/null
	fi
	isAgentRunning $MONAGENT_PYTHON $MONAGENT_WATCHDOG_PYTHON
	RETVAL=$?
	if [ $RETVAL -eq $SUCCESS ]; then
		log "Site24x7_Agent is running even after executing uninstall file"
		killAgent $MONAGENT_PYTHON $MONAGENT_WATCHDOG_PYTHON
		killAgent $MONAGENT_WATCHDOG_PYTHON $MONAGENT_PYTHON
	fi
	sleep 3
	isAgentRunning $MONAGENT_PYTHON $MONAGENT_WATCHDOG_PYTHON
	RETVAL=$?
	if [ $RETVAL -eq $SUCCESS ]; then
		ERROR_MSG="Uninstallation failed. Agent Still running may be run by a user with high privilege"
		exit $FAILURE
	fi
	isAgentRunning $MONAGENT_BIN $MONAGENT_WATCHDOG_BIN
	RETVAL=$?
	if [ $RETVAL -eq $SUCCESS ]; then
		log "Site24x7_Agent is running even after executing uninstall file"
		killAgent $MONAGENT_BIN $MONAGENT_WATCHDOG_BIN
		killAgent $MONAGENT_WATCHDOG_BIN $MONAGENT_BIN
	fi
	sleep 3
	isAgentRunning $MONAGENT_BIN $MONAGENT_WATCHDOG_BIN
	RETVAL=$?
	if [ $RETVAL -eq $SUCCESS ]; then
		ERROR_MSG="Uninstallation failed. Agent Still running may be run by a user with high privilege"
		exit $FAILURE
	fi

	if [ -d $MON_AGENT_HOME ]; then
		ERROR_MSG="Uninstallation failed. Agnet home directory exists"
		exit $FAILURE		
	fi
	if [ -f /etc/systemd/system/site24x7monagent.service ]; then
		systemctl disable site24x7monagent.service 2>/dev/null
		systemctl daemon-reload 2>/dev/null
		rm -f /etc/systemd/system/site24x7monagent.service 2>/dev/null
	fi
}


check_extraction_tool(){
	if [ $(command -v tar) ]; then
	    EXTRACTION_CMD="tar"
	    print_console "Extraction utility :: tar detected"
	elif [ $(command -v unzip) ]; then
		EXTRACTION_CMD="unzip"
		print_console "Extraction utility :: unzip detected"
	else
	    ERROR_MSG="Extraction utility :: both tar and unzip not present hence exiting"
	    print_red $ERROR_MSG
	    exit $FAILURE
	fi
}

isAgentInstalled() {	
	if [ -d "$MON_AGENT_HOME" ]; then				
		print_red "$PRODUCT_NAME monitoring agent is already installed in this machine."
		if [ "$MON_AGENT_FORCE_INSTALLATION" != "$BOOL_TRUE" ]; then
			print_red "Do you want to uninstall $PRODUCT_NAME monitoring agent?(y/n)"
			read UNINSTALL_INPUT
			log "$1 input from user : $UNINSTALL_INPUT"
		else
				UNINSTALL_INPUT="y"
		fi
		if [ "$UNINSTALL_INPUT" = "y" ] || [ "$UNINSTALL_INPUT" = "Y" ]; then
			unInstallAgent
			installAgent $1
			exit $SUCCESS
		elif [ "$UNINSTALL_INPUT" = "n"  ] || [ "$UNINSTALL_INPUT" = "N" ]; then
		  	print_red "Exiting $PRODUCT_NAME monitoring agent installation"
		  	exit $FAILURE
		else
			print_red "Exiting $PRODUCT_NAME monitoring agent installation since keys other than y/n is pressed"
			exit $FAILURE
		fi		
	fi
}

getAPIKey() {	
	if [ "$MON_AGENT_API_KEY" = "" ]; then
		echo "Please enter the API key : "
		read MON_AGENT_API_KEY
	fi	
	#log "API key From The User : $MON_AGENT_API_KEY"	
	if [ "${MON_AGENT_API_KEY}" = "" ]; then
		ERROR_MSG="API key is empty, hence quiting agent installation."
		unInstallAgent
		exit $FAILURE
	fi
}

updateConfFiles() {
	log "Updating API key in the conf file : $MON_AGENT_CONF_FILE"
	log "Proxy info : $MON_AGENT_PROXY_DETAILS"
	sed "s/customer_id = 0/customer_id = $MON_AGENT_API_KEY/" $MON_AGENT_CONF_FILE > $NEW_MON_AGENT_CONF_FILE
	mv $NEW_MON_AGENT_CONF_FILE $MON_AGENT_CONF_FILE
	log "Updating service manager $INIT_SYSTEM in $MON_AGENT_CONF_FILE"
	sed "s/service_manager = 0/service_manager = $INIT_SYSTEM/" $MON_AGENT_CONF_FILE > $NEW_MON_AGENT_CONF_FILE
	mv $NEW_MON_AGENT_CONF_FILE $MON_AGENT_CONF_FILE
	if [ "$ENV_COLUMNS" != "" ]; then
  		log "Updating discover process arg length in the conf file : $ENV_COLUMNS"
  		sed "s/disc_prc_arg_length = 5000/disc_prc_arg_length = $ENV_COLUMNS/" $MON_AGENT_CONF_FILE > $NEW_MON_AGENT_CONF_FILE
  		mv $NEW_MON_AGENT_CONF_FILE $MON_AGENT_CONF_FILE
  fi
	if [ "$MON_AGENT_DISPLAY_NAME" != "" ]; then
		log "Updating Display Name in the conf file : $MON_AGENT_DISPLAY_NAME"	
		sed "s/display_name = 0/display_name = $MON_AGENT_DISPLAY_NAME/" $MON_AGENT_CONF_FILE > $NEW_MON_AGENT_CONF_FILE
		mv $NEW_MON_AGENT_CONF_FILE $MON_AGENT_CONF_FILE
	fi
	if [ "$MON_AGENT_ALERT_GROUP" != "" ]; then
		log "Updating alert group in the conf file : $MON_AGENT_ALERT_GROUP"
		sed "s/alert_group = 0/alert_group = $MON_AGENT_ALERT_GROUP/" $MON_AGENT_CONF_FILE > $NEW_MON_AGENT_CONF_FILE
		mv $NEW_MON_AGENT_CONF_FILE $MON_AGENT_CONF_FILE	
	fi
	if [ "$MON_AGENT_MONITOR_GROUP" != "" ]; then
		log "Updating Monitor Group Name in the conf file : $MON_AGENT_MONITOR_GROUP"	
		sed "s/group_name = 0/group_name = $MON_AGENT_MONITOR_GROUP/" $MON_AGENT_CONF_FILE > $NEW_MON_AGENT_CONF_FILE
		mv $NEW_MON_AGENT_CONF_FILE $MON_AGENT_CONF_FILE
	fi
	if [ "$MON_AGENT_THRESHOLD_PROFILE" != "" ]; then
		log "Updating Threshold Profile in the conf file : $MON_AGENT_THRESHOLD_PROFILE"	
		sed "s/threshold_profile = 0/threshold_profile = $MON_AGENT_THRESHOLD_PROFILE/" $MON_AGENT_CONF_FILE > $NEW_MON_AGENT_CONF_FILE
		mv $NEW_MON_AGENT_CONF_FILE $MON_AGENT_CONF_FILE
	fi
	if [ "$MON_AGENT_NOTIFICATION_PROFILE" != "" ]; then
		log "Updating Notification Profile in the conf file : $MON_AGENT_NOTIFICATION_PROFILE"	
		sed "s/notification_profile = 0/notification_profile = $MON_AGENT_NOTIFICATION_PROFILE/" $MON_AGENT_CONF_FILE > $NEW_MON_AGENT_CONF_FILE
		mv $NEW_MON_AGENT_CONF_FILE $MON_AGENT_CONF_FILE
	fi
	if [ "$MON_AGENT_RESOURCE_PROFILE" != "" ]; then
		log "Updating Resource Check Profile in the conf file : $MON_AGENT_RESOURCE_PROFILE"	
		sed "s/resource_profile = 0/resource_profile = $MON_AGENT_RESOURCE_PROFILE/" $MON_AGENT_CONF_FILE > $NEW_MON_AGENT_CONF_FILE
		mv $NEW_MON_AGENT_CONF_FILE $MON_AGENT_CONF_FILE
	fi
	if [ "$MON_AGENT_LOG_PROFILE" != "" ]; then
		log "Updating Log Profile in the conf file : $MON_AGENT_LOG_PROFILE"
		sed "s/log_profile = 0/log_profile = $MON_AGENT_LOG_PROFILE/" $MON_AGENT_CONF_FILE > $NEW_MON_AGENT_CONF_FILE
		mv $NEW_MON_AGENT_CONF_FILE $MON_AGENT_CONF_FILE
	fi
	if [ "$MON_AGENT_LOG_TYPE" != "" ]; then
		log "Updating Log Type in the conf file : $MON_AGENT_LOG_TYPE"
		sed "s/log_type = 0/log_type = $MON_AGENT_LOG_TYPE/" $MON_AGENT_CONF_FILE > $NEW_MON_AGENT_CONF_FILE
		mv $NEW_MON_AGENT_CONF_FILE $MON_AGENT_CONF_FILE
	fi
	if [ "$MON_AGENT_LOG_FILES" != "" ]; then
		log "Updating Log Profile in the conf file : $MON_AGENT_LOG_FILES"
		sed "s/log_files = 0/log_files = $MON_AGENT_LOG_FILES/" $MON_AGENT_CONF_FILE > $NEW_MON_AGENT_CONF_FILE
		mv $NEW_MON_AGENT_CONF_FILE $MON_AGENT_CONF_FILE
	fi
	if [ "$MON_AGENT_INSTALLER" != "" ]; then
		log "Updating Installer type in the conf file : $MON_AGENT_INSTALLER"
		sed "s/installer = 0/installer = $MON_AGENT_INSTALLER/" $MON_AGENT_CONF_FILE > $NEW_MON_AGENT_CONF_FILE
		mv $NEW_MON_AGENT_CONF_FILE $MON_AGENT_CONF_FILE
	fi
	if [ "$MON_AGENT_CONFIGURATION_TEMPLATE" != "" ]; then
		log "Updating configuration template in the conf file : $MON_AGENT_CONFIGURATION_TEMPLATE"	
		sed "s/configuration_template = 0/configuration_template = $MON_AGENT_CONFIGURATION_TEMPLATE/" $MON_AGENT_CONF_FILE > $NEW_MON_AGENT_CONF_FILE
		mv $NEW_MON_AGENT_CONF_FILE $MON_AGENT_CONF_FILE
	fi
	if [ "$MON_AGENT_TAGS" != "" ]; then
        log "Updating tags configuration in the conf file : $MON_AGENT_TAGS"
        findAndReplace "s@tags = 0@tags = $MON_AGENT_TAGS@g" $MON_AGENT_CONF_FILE
	fi
	if [ "$MON_AGENT_LOCAL_SETUP" != "" ]; then
        log "Updating production configuration in the conf file : $MON_AGENT_LOCAL_SETUP"
        findAndReplace "s@production = 1@production = 0@g" $MON_AGENT_CONF_FILE
	fi
	if [ "$MON_AGENT_NEW_KEY" == "$BOOL_TRUE" ]; then
		log "Updating new key flag"
		findAndReplace "s@site24x7 = SITE24X7@site24x7 = SITE24X7NEW@g" $MON_AGENT_CONF_FILE
	fi

}

detectInitDaemon(){
	local output=
	output="$(systemctl --version 2>/dev/null)"
	if [ $? -eq 0 ]; then
		log "${INIT_SYSTEMD} version: " ${output}

		if [ -d "${SYSTEMD_INIT_FOLDER}" ]; then
			INIT_SYSTEM=${INIT_SYSTEMD}
		else
			INIT_SYSTEM=${INIT_SYSV}
			log "${INIT_SYSTEMD} was detected but ${SYSTEMD_INIT_FOLDER} does not exist, using ${INIT_SYSV} handling as a fallback"
		fi
	else
		INIT_SYSTEM=${INIT_SYSV}
	fi
	
	log "Detected init system: ${INIT_SYSTEM}"
}


detectInitScriptLocation() {
	log "Determining location of init scripts..."

	if [ "${INIT_SYSTEM}" = ${INIT_SYSTEMD} ]; then
		INIT_FOLDER=${SYSTEMD_INIT_FOLDER}
	else
		if [ -d /etc/init.d ]; then
			INIT_FOLDER=/etc/init.d
		elif [ -d /sbin/init.d ]; then
			INIT_FOLDER=/sbin/init.d
		elif [ -d /etc/rc.d ]; then
			INIT_FOLDER=/etc/rc.d
		fi
	fi

	log "Location of init scripts -----> ${INIT_FOLDER}"
}

setupInitFiles(){
	log "setup init files"
	chmod 755 $MON_AGENT_BIN_DIR
	if [ "$OS_NAME" = "Darwin" ]; then
		chmod 644 $MON_AGENT_OSX_SERVICE_PLIST_FILE 2>/dev/null
		chmod 644 $MON_AGENT_OSX_WATCHDOGSERVICE_PLIST_FILE 2>/dev/null
		cp $MON_AGENT_OSX_BIN_BOOT_SERVICE_FILE $MON_AGENT_OSX_SERVICE_PLIST_FILE
		cp $MON_AGENT_OSX_WATCHDOG_BIN_BOOT_SERVICE_FILE $MON_AGENT_OSX_WATCHDOGSERVICE_PLIST_FILE
		startAgent
	elif [ "$OS_NAME" = "FreeBSD" ]; then
		cp  $MON_AGENT_FREEBSD_BIN_BOOT_SERVICE_FILE $INIT_FOLDER/site24x7monagent
	elif [ "$OS_NAME" = "SunOS" ]; then
		cp $MON_AGENT_SUNOS_BIN_BOOT_SERVICE_FILE /var/svc/manifest/system/
		chmod 555 /var/svc/manifest/system/site24x7monagent.xml
		svccfg validate /var/svc/manifest/system/site24x7monagent.xml
		svccfg import /var/svc/manifest/system/site24x7monagent.xml
		svcadm enable site24x7monagent
		svcadm restart site24x7monagent
		sleep 3
		/opt/site24x7/monagent/bin/monagent restart
		exit $SUCCESS
	elif [ "${INIT_FOLDER}" != "${SYSTEMD_INIT_FOLDER}" ]; then
		cp  $MON_AGENT_BIN_BOOT_SERVICE_FILE $INIT_FOLDER/site24x7monagent
	elif [ "${INIT_FOLDER}" = "${SYSTEMD_INIT_FOLDER}" ]; then
		cp $MON_AGENT_SYSTEMD_BIN_BOOT_SERVICE_FILE $INIT_FOLDER/site24x7monagent.service
	fi
}

adding_sysv_scripts() {
	local result
	result=$($ADDING_TOOL $ADDING_TOOL_PARAMS ${PATH_TO_SCRIPT}${1} $ADDING_TOOL_SUFFIX_PARAMS 2>&1)
	status=$?
	log "${result}"

	if [ ${status} -gt 0 ] ; then
		INIT_ADDITION=$BOOL_FALSE
		print_red "Error while adding agent as service. Try manually.... to add it to daemon"
	fi
}

sysv_setup() {
	ADDING_TOOL=
	ADDING_TOOL_PARAMS=
	ADDING_TOOL_SUFFIX_PARAMS=
	PATH_TO_SCRIPT=

	log "Adding $AGENT_SERVICE_FILE_NAME_IN_INIT to init daemon "
	#Ubuntu
	if [ -x /usr/bin/update-rc.d ] ; then
		ADDING_TOOL="/usr/bin/update-rc.d"
		ADDING_TOOL_SUFFIX_PARAMS="defaults"
	elif [ -x /usr/sbin/update-rc.d ] ; then
		ADDING_TOOL="/usr/sbin/update-rc.d"
		ADDING_TOOL_SUFFIX_PARAMS="defaults"
	#RedHat
	elif [ -x /sbin/chkconfig ] ; then
		ADDING_TOOL="/sbin/chkconfig"
		ADDING_TOOL_PARAMS="--add"
	#Suse
	elif [ -x /usr/lib/lsb/install_initd ] ; then
		ADDING_TOOL="/usr/lib/lsb/install_initd"
		PATH_TO_SCRIPT="${INIT_FOLDER}/"
	#AIX
	elif which mkitab 2>/dev/null; then
		mkitab "sagent:2:once:${INIT_FOLDER}/${AGENT_SERVICE_FILE_NAME_IN_INIT} start > /tmp/site24x7monagent.log 2>&1"
		echo "/etc/rc.d/site24x7monagent stop > /tmp/site24x7monagent.log 2>&1" >> /etc/rc.shutdown
	else
		if [ "$OS_NAME" != "FreeBSD" ]; then
			INIT_ADDITION=$BOOL_FALSE
			print_red "Couldn't add ${AGENT_SERVICE_FILE_NAME_IN_INIT} to autostart. Please adjust and add it manually."
		fi
	fi

	#adding to autostart using detected tool
	if [ ! -z $ADDING_TOOL ] ; then
		adding_sysv_scripts "${AGENT_SERVICE_FILE_NAME_IN_INIT}"
	fi
}

systemd_setup() {
		systemctl daemon-reload  >> $MON_AGENT_INSTALL_LOG 2>/dev/null
		systemctl enable /etc/systemd/system/site24x7monagent.service >> $MON_AGENT_INSTALL_LOG 2>/dev/null
		RET_VAL=$?
		if [ $RET_VAL = $SUCCESS ]; then
			log "Return value after enabling site24x7monagent.service using systemd: $RET_VAL"
			systemctl daemon-reload  2>/dev/null
			systemctl start site24x7monagent.service  2>/dev/null
			RET_VAL=$?
			if [ $RET_VAL = $SUCCESS ]; then
				log "Return value after starting site24x7monagent.service using systemd: $RET_VAL"
			fi	
			systemctl daemon-reload  2>/dev/null
			print_green "Site24x7 monitoring agent watchdog started successfully"
			print_green "Site24x7 monitoring agent started successfully"
		else
			log "Problem in enabling agent using systemctl"
			startAgent
		fi
}

isAgentRunning() {
	PID=$($PS_CMD | grep -i $1 | grep -v grep | grep -v $2 | grep -v "Site24x7MonitoringAgent.install" | awk '/ / {print $2}')
	if [ "$PID" = "" ]; then 
	    return $FAILURE
	else	    
    	return $SUCCESS
	fi        
}

startAgent(){
	isAgentRunning $MONAGENT_PYTHON $MONAGENT_WATCHDOG_PYTHON
	RETVAL=$?
	if [ $RETVAL -eq $SUCCESS ]; then
		killAgent $MONAGENT_PYTHON $MONAGENT_WATCHDOG_PYTHON
		killAgent $MONAGENT_WATCHDOG_PYTHON $MONAGENT_PYTHON
	fi
	sleep 1
	isAgentRunning $MONAGENT_PYTHON $MONAGENT_WATCHDOG_PYTHON
	RETVAL=$?
	if [ $RETVAL -eq $SUCCESS ]; then
		ERROR_MSG="Old Agent Still running, may be run by a user with high privilege"
		exit $FAILURE
	fi
	isAgentRunning $MONAGENT_BIN $MONAGENT_WATCHDOG_BIN
	RETVAL=$?
	if [ $RETVAL -eq $SUCCESS ]; then
		log "Site24x7_Agent is running even after executing uninstall file"
		killAgent $MONAGENT_BIN $MONAGENT_WATCHDOG_BIN
		killAgent $MONAGENT_WATCHDOG_BIN $MONAGENT_BIN
	fi
	sleep 1
	isAgentRunning $MONAGENT_BIN $MONAGENT_WATCHDOG_BIN
	RETVAL=$?
	if [ $RETVAL -eq $SUCCESS ]; then
		ERROR_MSG="Old Agent Still running, may be run by a user with high privilege"
		exit $FAILURE
	fi
	$MON_AGENT_BIN_BOOT_FILE $MON_AGENT_START $MON_AGENT_PROXY_DETAILS
	RET_VAL=$?
	log "Return value after bin/monagnet for starting agent : $RET_VAL"
	if [ $RET_VAL = $FAILURE ]; then
		ERROR_MSG="Unable to start $PRODUCT_NAME Monitoring Agent. $MON_AGENT_CONTACT_SUPPORT_MESSAGE"
		exit $FAILURE
	fi
	exit $SUCCESS
}


change_switch_value(){
	sed "s/MON_AGENT_WATCHDOG_SWITCH=.*/MON_AGENT_WATCHDOG_SWITCH=$1/" $MON_AGENT_WATCHDOG_BIN_BOOT_FILE > $NEW_MON_AGENT_WATCHDOG_BIN_BOOT_FILE
	sed "s/MON_AGENT_SWITCH=.*/MON_AGENT_SWITCH=$1/" $MON_AGENT_BIN_BOOT_FILE > $NEW_MON_AGENT_BIN_BOOT_FILE
	mv $NEW_MON_AGENT_WATCHDOG_BIN_BOOT_FILE $MON_AGENT_WATCHDOG_BIN_BOOT_FILE
	mv $NEW_MON_AGENT_BIN_BOOT_FILE $MON_AGENT_BIN_BOOT_FILE
}

change_monagent_exec(){
	sed "s/MON_AGENT_PROG_NAME=.*/MON_AGENT_PROG_NAME=\"MonitoringAgent\.py\"/" $MON_AGENT_PROFILE > $NEW_MON_AGENT_PROFILE
	sed "s@MON_AGENT_EXEC_COMMAND=.*@MON_AGENT_EXEC_COMMAND=\"\$NOHUP_COMMAND $PYTHON_VENV_BIN_PATH \$MON_AGENT_LIB_DIR\/devops\/source\/python3.3\/src\/com\/manageengine\/monagent\/\$MON_AGENT_PROG_NAME \$PROXY_DETAILS\"@" $MON_AGENT_BIN_BOOT_FILE > $NEW_MON_AGENT_BIN_BOOT_FILE
	mv $NEW_MON_AGENT_PROFILE $MON_AGENT_PROFILE
	mv $NEW_MON_AGENT_BIN_BOOT_FILE $MON_AGENT_BIN_BOOT_FILE
}

change_watchdog_exec(){
	sed "s/MON_AGENT_WATCHDOG_PROG_NAME=.*/MON_AGENT_WATCHDOG_PROG_NAME=\"MonitoringAgentWatchdog.py\"/" $MON_AGENT_PROFILE > $NEW_MON_AGENT_PROFILE
	sed "s@MON_AGENT_WATCHDOG_EXEC_COMMAND=.*@MON_AGENT_WATCHDOG_EXEC_COMMAND=\"\$NOHUP_COMMAND $PYTHON_VENV_BIN_PATH \$MON_AGENT_LIB_DIR\/devops\/source\/python3.3\/src\/com\/manageengine\/monagent\/watchdog\/\$MON_AGENT_WATCHDOG_PROG_NAME\"@" $MON_AGENT_WATCHDOG_BIN_BOOT_FILE > $NEW_MON_AGENT_WATCHDOG_BIN_BOOT_FILE
	mv $NEW_MON_AGENT_WATCHDOG_BIN_BOOT_FILE $MON_AGENT_WATCHDOG_BIN_BOOT_FILE
	mv $NEW_MON_AGENT_PROFILE $MON_AGENT_PROFILE
}

moveConfFiles(){
	log "Moving $MON_AGENT_BIN_PROFILE to $MON_AGENT_PROFILE"
	mv -f $MON_AGENT_BIN_PROFILE $MON_AGENT_PROFILE >> $MON_AGENT_INSTALL_LOG 2>&1
	if [ "$OS_NAME" = "FreeBSD" ]; then
         mv -f $FREEBSD_PROFILE $MON_AGENT_PROFILE >> $MON_AGENT_INSTALL_LOG 2>&1
    fi
	log "Moving $MON_AGENT_BIN_PROFILE_ENV to $MON_AGENT_PROFILE_ENV"
	mv -f $MON_AGENT_BIN_PROFILE_ENV $MON_AGENT_PROFILE_ENV >> $MON_AGENT_INSTALL_LOG 2>&1	
	if [ "$SHELL_UTILITY" = "sh" ] || [ "$OS_NAME" = "FreeBSD" ]; then
		log "Moving $MON_AGENT_SHELL_BIN_MONAGENTWATCHDOG to $MON_AGENT_WATCHDOG_BIN_BOOT_FILE"
		mv -f $MON_AGENT_SHELL_BIN_MONAGENTWATCHDOG $MON_AGENT_WATCHDOG_BIN_BOOT_FILE
		log "Moving $MON_AGENT_SHELL_BIN_MONAGENT to $MON_AGENT_BIN_BOOT_FILE"
		mv -f $MON_AGENT_SHELL_BIN_MONAGENT $MON_AGENT_BIN_BOOT_FILE
	fi
	#log "Copying $MON_AGENT_BIN_BOOT_SERVICE_FILE to $MON_AGENT_INIT_FILE"
	#cp -vf $MON_AGENT_BIN_BOOT_SERVICE_FILE $MON_AGENT_INIT_FILE >> $MON_AGENT_INSTALL_LOG 2>&1
	#chown -vR $MON_AGENT_USER:$MON_AGENT_GROUP $MON_AGENT_INIT_FILE 2>&1
}

appendToFile() {
		echo "$1" >> $2		
}

createProductProfile() {
	log "Creating product specific profile for Monitoring Agent"
	deleteFileIfExists $MON_AGENT_PRODUCT_PROFILE
	appendToFile "OS_NAME=$OS_NAME; export OS_NAME" $MON_AGENT_PRODUCT_PROFILE
	appendToFile "OS_BINARY_TYPE=$OS_BINARY_TYPE; export OS_BINARY_TYPE" $MON_AGENT_PRODUCT_PROFILE
	appendToFile "PRODUCT_NAME=$PRODUCT_NAME;export PRODUCT_NAME" $MON_AGENT_PRODUCT_PROFILE
	appendToFile "PRODUCT_NAME_UPPERCASE=$PRODUCT_NAME_UPPERCASE;export PRODUCT_NAME_UPPERCASE" $MON_AGENT_PRODUCT_PROFILE	
	appendToFile "PRODUCT_NAME_LOWERCASE=$PRODUCT_NAME_LOWERCASE;export PRODUCT_NAME_LOWERCASE" $MON_AGENT_PRODUCT_PROFILE
	if [ "$OS_NAME" = "AIX" ] || [ "$OS_NAME" = "SunOS" ]; then
      MON_AGENT_USER='suser'
      MON_AGENT_GROUP='sgroup'
	fi
	appendToFile "MON_AGENT_NAME=$MON_AGENT_NAME;export MON_AGENT_NAME" $MON_AGENT_PRODUCT_PROFILE
	appendToFile "MON_AGENT_GROUP=$MON_AGENT_GROUP;export MON_AGENT_GROUP" $MON_AGENT_PRODUCT_PROFILE
	appendToFile "MON_AGENT_USER=$MON_AGENT_USER;export MON_AGENT_USER" $MON_AGENT_PRODUCT_PROFILE
	#appendToFile "MON_AGENT_API_KEY=$MON_AGENT_API_KEY;export MON_AGENT_API_KEY" $MON_AGENT_PRODUCT_PROFILE
	appendToFile "INSTALL_DIR=$INSTALL_DIR;export INSTALL_DIR" $MON_AGENT_PRODUCT_PROFILE
	appendToFile "PRODUCT_HOME=$PRODUCT_HOME;export PRODUCT_HOME" $MON_AGENT_PRODUCT_PROFILE	
	appendToFile "MON_AGENT_HOME=$MON_AGENT_HOME;export MON_AGENT_HOME" $MON_AGENT_PRODUCT_PROFILE
}

command_test() {
	 $COMMAND_CHECKER $1 > /dev/null
    if [ $? -ne 0 ]; then
    	if [ $2 = "optional" ]; then
    		WARNING_MSG=$WARNING_MSG" $1"
    		WARNING_FLAG=$BOOL_TRUE
    	else
    		ERROR_MSG=$ERROR_MSG" $1"
    		SEVERE_FLAG=$BOOL_TRUE
    	fi 
    fi
}

findAndReplace(){
	log "FIND AND REPLACE : String : $1 File : $2"
	sed -i "$1" "$2" 
}

addUserAndGroup(){
	ADDUSER_ERROR_MSG="Cannot add"
	ADDUSER_ERROR_FLAG=$BOOL_FALSE
	if [ "$OS_NAME" = "FreeBSD" ]; then
    	pw groupadd $MON_AGENT_GROUP >> $MON_AGENT_INSTALL_LOG 2>/dev/null
    	pw useradd $MON_AGENT_USER -d $MON_AGENT_HOME -c $MON_AGENT_USER -s /bin/sh 2>/dev/null
	else
		WARNING_FLAG=$BOOL_FALSE
		command_test groupadd "optional"
		command_test useradd "optional"
		if [ "$WARNING_FLAG" = "$BOOL_FALSE" ]; then
			groupadd $MON_AGENT_GROUP 2>/dev/null
			useradd -r -d $MON_AGENT_HOME -c $MON_AGENT_USER -s /bin/bash $MON_AGENT_USER 2>/dev/null
		fi
	fi
	if [ "$OS_NAME" = "AIX" ]; then
		   mkgroup sgroup 2>/dev/null
           /usr/sbin/useradd -m -g sgroup suser 2>/dev/null
    fi
    if [ "$OS_NAME" = "SunOS" ]; then
            /usr/sbin/groupadd sgroup 2>/dev/null
           /usr/sbin/useradd -d /opt/site24x7/monagent -m suser 2>/dev/null
        fi
    if [ "$MON_AGENT_SWITCH_USER" == "$SUCCESS" ]; then
		cat /etc/group | grep $MON_AGENT_GROUP >> $MON_AGENT_INSTALL_LOG
    	RETVAL=$?
    	if [ "$RETVAL" != "$SUCCESS" ]; then
    		ADDUSER_ERROR_MSG="$ADDUSER_ERROR_MSG group site24x7-group |"
			ADDUSER_ERROR_FLAG=$BOOL_TRUE
    	fi
    	log "User exists check"
    	id -u $MON_AGENT_USER >> $MON_AGENT_INSTALL_LOG
    	RETVAL=$?
    	if [ "$RETVAL" != "$SUCCESS" ]; then
   	 		ADDUSER_ERROR_MSG="$ADDUSER_ERROR_MSG user site24x7-agent "
    		ADDUSER_ERROR_FLAG=$BOOL_TRUE
    	fi
		if [ "$ADDUSER_ERROR_FLAG" == "$BOOL_TRUE" ] && [ "$MON_AGENT_SWITCH_USER" == "$SUCCESS" ]; then
			ERROR_MSG="$ADDUSER_ERROR_MSG !!! $MON_AGENT_CONTACT_SUPPORT_MESSAGE"
		exit 2
		fi
	fi
}

changeToExecutable(){
	chmod 755 $MON_AGENT_BIN_BOOT_FILE
	chmod 755 $MON_AGENT_WATCHDOG_BIN_BOOT_FILE
	chown -R $MON_AGENT_USER:$MON_AGENT_GROUP $PRODUCT_HOME 2>/dev/null
}

checkShellUtility(){
    if command -v bash >/dev/null; then
        SHELL_UTILITY="bash"
        REDIRECTION_CMD='&>/dev/null'
        print_console "Detected shell :: bash"
    else
        SHELL_UTILITY="sh"
        REDIRECTION_CMD='>/dev/null 2>&1'
        print_console "Detected shell :: sh"
    fi
}

isDockerAgent(){
	if [ "$MON_AGENT_PS_WORKER" == "$BOOL_TRUE" ]; then
		findAndReplace "/enabled =/c\enabled = 1" $MON_AGENT_PS_WORKER_FILE
	fi

	if [ "$MON_AGENT_DOCKER_AGENT" == "$BOOL_TRUE" ]; then
		findAndReplace "/docker_agent =/c\docker_agent = 1" $MON_AGENT_CONF_FILE
		findAndReplace "/udp_server_ip =/c\udp_server_ip = 0.0.0.0" $MON_AGENT_CONF_FILE
		findAndReplace "/procfs_path =/c\procfs_path = /host/proc" $MON_AGENT_PS_WORKER_FILE
		findAndReplace "/sysfs_path =/c\sysfs_path = /host/sys" $MON_AGENT_PS_WORKER_FILE
		if [ ! -z $HOST_NAME ]; then
			findAndReplace "/docker_host=/c\docker_host=$HOST_NAME" $MON_AGENT_CONF_FILE
		fi
	fi
}

docker_conf_update(){
	#check if docker.sock file is present in this location
	if [ -S "/var/run/docker.sock" ]; then
                echo "docker.sock file found adding permissions"
		group_name=`stat -c %G /var/run/docker.sock`
		group_id=`stat -c %g /var/run/docker.sock`
		if [ "$group_id" = "0" ]; then
			#echo "Would you like to add site24x7-agent to the group root. Since docker is running as group root?(y/n)"			
			#read docker_install		
			#if [ "$docker_install" = "y" ] && [ "$docker_install" = "Y" ]; then
			#	usermod -a -G $group_name $MON_AGENT_USER 2>&1>/dev/null
			#else
			#	chmod o=rwx /var/run/docker.sock 2>&1>/dev/null			
			#fi
			log "docker is in root group hence not configured" 		
		else
			usermod -a -G $group_name $MON_AGENT_USER 2>/dev/null
		fi
	else
		if [ `getent group docker` ]; then
		      usermod -a -G "docker" $MON_AGENT_USER 2>/dev/null
		fi
	fi
}

var_log_update(){
	usermod -a -G "adm" $MON_AGENT_USER 2>/dev/null
	usermod -a -G "syslog" $MON_AGENT_USER 2>/dev/null
}

updatePsWorker(){
	if [ "$MON_AGENT_PS_WORKER" == "$BOOL_TRUE" ]; then
		findAndReplace "/enabled =/c\enabled = 1" $MON_AGENT_PS_WORKER_FILE
	fi
	if [ "$MON_AGENT_PROCFS_PATH" != "" ]; then
		findAndReplace "/procfs_path =/c\procfs_path = $MON_AGENT_PROCFS_PATH" $MON_AGENT_PS_WORKER_FILE
	fi
	if [ "$MON_AGENT_SYSFS_PATH" != "" ]; then
		findAndReplace "/sysfs_path =/c\sysfs_path = $MON_AGENT_SYSFS_PATH" $MON_AGENT_PS_WORKER_FILE
	fi
}


createInstallLog() {
        if [ ! -d $PRODUCT_HOME ]; then
			mkdir -p $PRODUCT_HOME
			RET_VAL=$?
			if [ $RET_VAL == $FAILURE ]; then
					ERROR_MSG="Error while creating $PRODUCT_HOME directory. Hence quiting agent installation!!"
					exit 2
			fi
        fi
        if [ ! -f $MON_AGENT_INSTALL_LOG ];     then
			touch $MON_AGENT_INSTALL_LOG
			RET_VAL=$?
			if [ $RET_VAL == $FAILURE ]; then
					ERROR_MSG="Error while creating installtion log. Hence quiting agent installation!!"
					exit 2
			fi
        fi
}

installAgent(){
	variableUpdate
	check_extraction_tool
	check_python_attendance
	set_pypi_files
	isAgentInstalled $1
	getAPIKey
	extractBinaries
    createProductProfile
    addUserAndGroup
    checkShellUtility
    if [ "$MON_AGENT_DOCKER_AGENT" == "$BOOL_FALSE" ]; then
		setup_python_dependencies
	fi
	generateUninstallFile $MON_AGENT_HOME/bin/uninstall
	updateConfFiles
	moveConfFiles
	if [ "$1" = "s24x7-agent" ]; then
		print_green "going to run as $MON_AGENT_USER"
		if [ "$OS_NAME" != "AIX" ]; then
			docker_conf_update
			var_log_update
		fi
		change_switch_value 1
	else
		change_switch_value 0
	fi
	change_monagent_exec
	change_watchdog_exec
	changeToExecutable
	updatePsWorker
	isDockerAgent
	#only for root
	if [ "$1" != "nonroot" ]; then
		if [ "$OS_NAME" = "Darwin" ]; then
			INIT_FOLDER="launchctl"
		fi
		detectInitDaemon
		detectInitScriptLocation
	fi
	if [ "$INIT_FOLDER" != "" ]; then
		setupInitFiles
		if [ "$INIT_SYSTEM" = "$INIT_SYSTEMD" ] ; then
			systemd_setup
		else
			sysv_setup
			startAgent
		fi
	else
		print_red "Init folder cannot be detected"
		log "init folder cannot be detected"
		startAgent
	fi
	exit $SUCCESS
}

#folder presence checked as reinstall and uninstall do folder level changes
agent_uninstallation_check(){
	if [ ! -d $MON_AGENT_HOME ]; then
		printf "\033[31m
Agent is not installed in the machine to $1...Try installing Site24x7 monitoring agent\033[0m\n
Usage :
        Installation command   : bash Site24x7InstallScript.sh -i -key=<api_key>
\n"
		exit $FAILURE
	fi
}

usage() {
printf '\033[31m
	Usage :
		Install command   : Site24x7MonitoringAgent.install -i -key=<api_key> -proxy=<username:password@host:port>

	Options:
		-h                            output usage information
		-proxy                        Set proxy to connect to the site24x7 server, if needed. For example -proxy=username:password@host:port, if there is no username and passowrd for proxy server then use -proxy=host:port"
		-ct,-CT                       Configuration Template to be associated with the server
		-gn,-GN                       Group to which the server has to be added
		-tp,-TP                       Threshold profile to be associated with the server
		-np,-NP                       Notification profile to be associated with the server
		-rp,-RP                       Resource Profile to be associated with the server
		-lp,-LP                       Log Profile to be associated with the server
		-lt,-LT                       Log Type to be associated with the server. For example -lt=SysLog
		-lf,-LF                       Log Files to be collected for given log type. For example -lf=/var/log/syslog\n\033[0m\n'

	exit $FAILURE
}

main() {
	createInstallLog
	if [ "$MON_AGENT_NONROOT" = "$BOOL_TRUE" ]; then
		if [ "$(id -u)" = "0" ]; then
			echo "can't use nonroot|nr option when logged in as root"
			exit $FAILURE
		else
			username=`id -u -n`
			USER_HOME=""
			command -v getent 2>/dev/null
			if [ $? = 0 ]; then
				USER_HOME=`getent passwd $username | cut -d: -f6`
			fi
			if [ "$USER_HOME" = "" ]; then
				USER_HOME=`python -c "import getpass;from os.path import expanduser; username=(getpass.getuser()); print(expanduser('~{}'.format(username)))"`
			fi
			INSTALL_DIR=$USER_HOME
		fi
	else
		isRootUser
		INSTALL_DIR="/opt"
	fi

	if [ "$MON_AGENT_INSTALL_INPUT" = "$INSTALL" ]; then
		if [ "$MON_AGENT_NONROOT" = "$BOOL_TRUE" ]; then
			installAgent "nonroot"
		elif [ "$MON_AGENT_SWITCH_USER" = "$SUCCESS" ]; then
			installAgent "s24x7-agent"
		else
			installAgent "root"
		fi
	elif [ "$MON_AGENT_INSTALL_INPUT" = "$UNINSTALL" ]; then
		agent_uninstallation_check "uninstall"
		MON_AGENT_INSTALL_LOG=$INSTALL_DIR/$PRODUCT_NAME_LOWERCASE/site24x7install.log
        unInstallAgent
        exit $SUCCESS
	else
		usage
	fi

}


while [ "$1" != "" ]; do
	PARAM=`echo $1 | awk -F= '{print $1}'`
	VALUE=`echo $1 | awk -F= '{print $2}'`
	#echo $PARAM $VALUE 
	case $PARAM in
		-h|--help)
			usage
			;;
		-s24x7-agent)
			MON_AGENT_SWITCH_USER=$SUCCESS
			;;
		-nonroot|-nr)
			MON_AGENT_NONROOT=$BOOL_TRUE
			;;
		-i)
			MON_AGENT_INSTALL_INPUT=$INSTALL
			;;
		-u)
			MON_AGENT_INSTALL_INPUT=$UNINSTALL
			;;
		-key)
			MON_AGENT_API_KEY=$VALUE
			;;
		-columns)
			ENV_COLUMNS=$VALUE
			;;
		-newkey|-nk)
			MON_AGENT_NEW_KEY=$BOOL_TRUE
			;;
		-local)
			MON_AGENT_LOCAL_SETUP=$BOOL_TRUE
			;;
		-proxy)
			MON_AGENT_PROXY_DETAILS=$VALUE
			;;
		-f)
			MON_AGENT_FORCE_INSTALLATION=$BOOL_TRUE
			MON_AGENT_FORCE_SYSLOG_INSTALLATION=$BOOL_TRUE
			;;
		-dn|-DN)
			MON_AGENT_DISPLAY_NAME=$VALUE
		    ;;
		-gn|-GN)
			MON_AGENT_MONITOR_GROUP=$VALUE
		    ;;
		-tp|-TP)
			MON_AGENT_THRESHOLD_PROFILE=$VALUE
		    ;;
		-np|-NP)
			MON_AGENT_NOTIFICATION_PROFILE=$VALUE
		    ;;
		-rp|-RP)
			MON_AGENT_RESOURCE_PROFILE=$VALUE
		    ;;
		-lp|-LP)
			MON_AGENT_LOG_PROFILE=$VALUE
		    ;;
	    -ct|-CT)
			MON_AGENT_CONFIGURATION_TEMPLATE=$VALUE
		    ;;
		-ag|-AG)
			MON_AGENT_ALERT_GROUP=$VALUE
			;;
	   -installer)
			MON_AGENT_INSTALLER=$VALUE
	    	;;
	    -da|-docker-agent)
			MON_AGENT_DOCKER_AGENT=$BOOL_TRUE
			;;
		-procfs_path)
			MON_AGENT_PROCFS_PATH=$VALUE
			;;
		-sysfs_path)
			MON_AGENT_SYSFS_PATH=$VALUE
			;;
		-ps_worker|-psw)
			MON_AGENT_PS_WORKER=$BOOL_TRUE
			;;
		-cp|-CP)
			COMPILE_PYTHON_PACKAGES=$BOOL_TRUE
			;;
		-venv)
			USE_SYSTEM_VENV=$BOOL_TRUE	
			;;
		-tags)
            MON_AGENT_TAGS=$VALUE
            ;;
     	-automation)
            AUTOMATION=$VALUE
            ;;
         -plugins)
            PLUGINS=$VALUE
            ;;
         -management_actions)
            MGMT_AXN=$VALUE
            ;;
         -heartbeat)
         	HEARTBEAT=$VALUE
         	;;
         -dc)
         	DC=$VALUE
         	;;
         -applications)
         	APPS=$VALUE
         	;;
         -resource_check)
         	RSRC_CHECK=$VALUE
         	;;
		-python)
			INPUT_PYTHON=$VALUE
			;;
		*)
			log $ECHO_RPRINT "Unknown installation parameter : $PARAM"
			usage
			;;
	esac
	shift
done

main
